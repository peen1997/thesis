{"version":3,"sources":["actions/errorAction.js","actions/types.js","components/auth/LoginModal.js","actions/authAction.js","components/auth/RegisterModal.js","components/auth/Logout.js","components/Navbar.js","components/FeedbackModal.js","actions/feedbackAction.js","reducers/feedbackReducer.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["returnErrors","msg","status","type","payload","id","arguments","length","undefined","clearErrors","LoginModal","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","modal","email","password","toggle","props","setState","onChange","e","defineProperty","target","name","value","onSubmit","preventDefault","_this$state","admin","login","inherits","createClass","key","prevProps","_this$props","error","isAuthenticated","react_default","a","createElement","NavLink","onClick","href","Modal","isOpen","ModalHeader","ModalBody","Alert","color","Form","FormGroup","Label","for","Input","placeholder","className","Button","style","marginTop","block","Component","connect","auth","_ref2","dispatch","body","JSON","stringify","axios","post","headers","Content-Type","then","res","data","catch","err","response","RegisterModal","newAdmin","register","_ref","Logout","react","logout","AppNavbar","_this$props$auth","authLinks","NavItem","auth_Logout","guestLinks","auth_RegisterModal","auth_LoginModal","Navbar","dark","expand","Container","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","FeedbackModal","feedback","newFeedback","addFeedback","document","getElementById","reset","marginBottom","marginLeft","row","sm","Col","FormText","check","size","offset","initialState","feedbacks","loading","token","localStorage","getItem","isLoading","combineReducers","action","objectSpread","filter","_id","toConsumableArray","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","Header","backgroundColor","src","width","height","fontSize","App","es","Header_Header","components_Navbar","components_FeedbackModal","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0a592c8.chunk.js","sourcesContent":["import {GET_ERRORS,CLEAR_ERRORS} from '../actions/types'\r\n\r\n//Return errors\r\nexport const returnErrors = (msg,status,id=null)=>{\r\n    return {\r\n        type : GET_ERRORS,\r\n        payload : {msg,status,id}\r\n    }\r\n}\r\n\r\n// Clear errors \r\nexport const clearErrors = ()=>{\r\n    return {\r\n        type : CLEAR_ERRORS\r\n    }\r\n}","export const GET_FEEDBACKS = 'GET_FEEDBACKS';\r\nexport const ADD_FEEDBACK = 'ADD_FEEBACK';\r\nexport const DELETE_FEEDBACK = 'DELETE_FEEDBACK';\r\nexport const FEEDBACKS_LOADING = 'FEEDBACLS_LOADING';\r\nexport const ADMIN_LOADING = \"ADMIN_LOADING\";\r\nexport const ADMIN_LOADED = \"ADMIN_LOADED\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const GET_ERRORS = 'GET_ERRORS';\r\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';","import React, { Component } from 'react'\r\nimport {\r\n    Button,\r\n    Alert,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink\r\n} from 'reactstrap'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {login} from '../../actions/authAction';\r\nimport { clearErrors } from \"../../actions/errorAction\";\r\n\r\nexport class LoginModal extends Component {\r\n    state = {\r\n        modal : false,\r\n        email : '',\r\n        password : '',\r\n        msg : null\r\n    }\r\n    static propTypes = {\r\n        isAuthenticated : PropTypes.bool,\r\n        error : PropTypes.object.isRequired,\r\n        login : PropTypes.func.isRequired,\r\n        clearErrors : PropTypes.func.isRequired\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        const {error,isAuthenticated}= this.props\r\n        if(error !== prevProps.error){\r\n            //Check for register error\r\n            if(error.id ==='LOGIN_FAIL')\r\n                {this.setState({msg:error.msg.msg})}\r\n            else {this.setState({msg:null})}\r\n        }\r\n\r\n        //If authenticated,close modal \r\n        if(this.state.modal){\r\n            if(isAuthenticated){\r\n                this.toggle()\r\n            }\r\n        }\r\n    }\r\n    toggle = () =>{\r\n        this.props.clearErrors()\r\n        this.setState({\r\n            modal : !this.state.modal\r\n        })\r\n    }\r\n    onChange = e =>{\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n    onSubmit = e =>{\r\n        e.preventDefault()\r\n        const {email,password} = this.state\r\n\r\n        const admin = {\r\n            email,\r\n            password\r\n        }\r\n        this.props.login(admin)\r\n    }\r\n    render() {\r\n        return (\r\n        <div>\r\n            <NavLink onClick = {this.toggle} href='#'>\r\n                Login\r\n            </NavLink>\r\n\r\n            <Modal\r\n                isOpen ={this.state.modal} \r\n                toggle = {this.toggle}\r\n            >\r\n            <ModalHeader toggle={this.toggle}>Login</ModalHeader>\r\n            <ModalBody>\r\n                {this.state.msg?(<Alert color='danger'>{this.state.msg}</Alert>):null}\r\n                <Form onSubmit = {this.onSubmit}>\r\n                    <FormGroup>\r\n                        <Label for ='email'>Email</Label>\r\n                                <Input\r\n                                    type = \"email\"\r\n                                    name = \"email\"\r\n                                    id = \"email\"\r\n                                    placeholder =\"email\"\r\n                                    className = 'mb-3'\r\n                                    onChange = {this.onChange}\r\n                                />\r\n                                <Label for ='password'>Password</Label>\r\n                                <Input\r\n                                    type = \"password\"\r\n                                    name = \"password\"\r\n                                    id = \"password\"\r\n                                    placeholder =\"Password\"\r\n                                    className = 'mb-3'\r\n                                    onChange = {this.onChange}\r\n                                />\r\n                                <Button color =\"dark \" style ={{marginTop:\"2rem\"} } block\r\n                            >Login</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </ModalBody>\r\n            </Modal>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    isAuthenticated : state.auth.isAuthenticated,\r\n    error : state.error\r\n})\r\nexport default connect(mapStateToProps,{login,clearErrors})(LoginModal);\r\n\r\n","import {AUTH_ERROR,ADMIN_LOADING,ADMIN_LOADED,REGISTER_SUCCESS,REGISTER_FAIL,LOGIN_FAIL,LOGIN_SUCCESS,LOGOUT_SUCCESS} from './types'\r\nimport axios from 'axios'\r\nimport {returnErrors} from './errorAction';\r\n\r\n//Setup Config/headers and token\r\nexport const tokenConfig = getState =>{\r\n    //Get token from local \r\n    const token = getState().auth.token\r\n\r\n    //Config Headers\r\n    const config = {\r\n        headers : {\r\n            'Content-Type' : \"application/json\"\r\n        }\r\n    }\r\n    if(token){\r\n        config.headers['x-auth-token'] = token //{x-auth-token:token}\r\n\r\n    }\r\n    return config\r\n}\r\n\r\n// Check token and load Admin\r\nexport const loadAdmin = ()=>(dispatch,getState)=>{\r\n    dispatch({type : ADMIN_LOADING})\r\n    axios.get('/api/auth/admin',tokenConfig(getState))\r\n        .then(res=>dispatch({\r\n            type : ADMIN_LOADED,\r\n            payload : res.data\r\n        }))\r\n        .catch(err=>{\r\n            dispatch(returnErrors(err.response.msg,err.respone.status))\r\n            dispatch({\r\n                type : AUTH_ERROR\r\n            })\r\n        })\r\n}\r\n\r\n// Register User\r\nexport const register = ({name,email,password})=>dispatch=>{\r\n    // Header \r\n    const config = {\r\n        headers : {\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({name,email,password})\r\n\r\n    axios.post('/api/admin',body,config)\r\n        .then(res =>dispatch({\r\n            type : REGISTER_SUCCESS,\r\n            payload : res.data\r\n        }))\r\n        .catch(err=>{\r\n            dispatch(returnErrors(err.response.data,err.response.status,'REGISTER_FAIL'))\r\n            dispatch({\r\n                type : REGISTER_FAIL\r\n            })\r\n        })\r\n}\r\n\r\n// logout action \r\nexport const logout = () =>{\r\n    return {\r\n        type : LOGOUT_SUCCESS\r\n    }\r\n}\r\n\r\n// login action \r\nexport const login = ({email,password})=>dispatch=>{\r\n    //Config \r\n    const config = {\r\n        headers : {\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    }\r\n\r\n    // Body request\r\n    const body = JSON.stringify({email,password})\r\n\r\n    axios.post('/api/auth',body,config)\r\n        .then(res =>dispatch({\r\n            type : LOGIN_SUCCESS,\r\n            payload : res.data\r\n        }))\r\n        .catch(err=>{\r\n            dispatch(returnErrors(err.response.data,err.response.status,'LOGIN_FAIL'))\r\n            dispatch({\r\n                type : LOGIN_FAIL\r\n            })\r\n        })\r\n}","import React, { Component } from 'react'\r\nimport {\r\n    Button,\r\n    Alert,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink\r\n} from 'reactstrap'\r\nimport {connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {register} from '../../actions/authAction'\r\nimport {clearErrors} from '../../actions/errorAction'\r\n\r\n\r\nexport class RegisterModal extends Component {\r\n    state = {\r\n        modal : false,\r\n        name : '',\r\n        email : '',\r\n        password : '',\r\n        msg : null\r\n    }\r\n    static propTypes = {\r\n        isAuthenticated : PropTypes.bool,\r\n        error : PropTypes.object.isRequired,\r\n        clearErrors : PropTypes.func.isRequired,\r\n        register : PropTypes.func.isRequired\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        const {error,isAuthenticated} = this.props\r\n        if(error !== prevProps.error){\r\n            //Check for register error\r\n            if(error.id ==='REGISTER_FAIL')\r\n                this.setState({msg : error.msg.msg})\r\n            else this.setState({msg : null})\r\n        }\r\n        //close modal\r\n        if(this.state.modal){\r\n            if(isAuthenticated){\r\n                this.toggle()\r\n            }\r\n        }\r\n    }\r\n        toggle = () => {\r\n            this.props.clearErrors()\r\n            this.setState({\r\n                modal : !this.state.modal\r\n            })\r\n        }\r\n        \r\n        onChange = (e) =>{\r\n            this.setState({[e.target.name]:e.target.value})\r\n        }\r\n        onSubmit = (e) =>{\r\n            e.preventDefault()\r\n\r\n            const {name,email,password}=this.state\r\n\r\n            const newAdmin = {\r\n                name,\r\n                email,\r\n                password\r\n            }\r\n            this.props.register(newAdmin)\r\n        }\r\n    render() {\r\n        return (\r\n        <div>\r\n            <NavLink onClick={this.toggle} href='#'>\r\n                    Register\r\n                </NavLink>\r\n\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle = {this.toggle} \r\n                >\r\n                <ModalHeader toggle = {this.toggle}>Register</ModalHeader>\r\n                <ModalBody>\r\n                    {this.state.msg ? (<Alert color = 'danger'>{this.state.msg}</Alert>):null}\r\n                    <Form onSubmit = {this.onSubmit}>\r\n                        <FormGroup>\r\n                            <Label for ='name'>Name</Label>\r\n                            <Input\r\n                                type = \"text\"\r\n                                name = \"name\"\r\n                                id = \"name\"\r\n                                placeholder =\"Name\"\r\n                                className = 'mb-3'\r\n                                onChange = {this.onChange}\r\n                            />\r\n                            <Label for ='email'>Email</Label>\r\n                            <Input\r\n                                type = \"email\"\r\n                                name = \"email\"\r\n                                id = \"email\"\r\n                                placeholder =\"email\"\r\n                                className = 'mb-3'\r\n                                onChange = {this.onChange}\r\n                            />\r\n                            <Label for ='password'>Password</Label>\r\n                            <Input\r\n                                type = \"password\"\r\n                                name = \"password\"\r\n                                id = \"password\"\r\n                                placeholder =\"Password\"\r\n                                className = 'mb-3'\r\n                                onChange = {this.onChange}\r\n                            />\r\n                            <Button color =\"dark \" style ={{marginTop:\"2rem\"} } block\r\n                        >Register</Button>\r\n                        </FormGroup>\r\n                        \r\n                    </Form>\r\n                </ModalBody>\r\n                </Modal>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state=>({\r\n    isAuthenticated : state.auth.isAuthenticated,\r\n    error : state.error\r\n})\r\nexport default connect(mapStateToProps,{register,clearErrors})(RegisterModal)\r\n","import React, { Component,Fragment } from 'react'\r\nimport {NavLink} from 'reactstrap'\r\nimport {logout} from '../../actions/authAction'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class Logout extends Component {\r\n    static propTypes = {\r\n        logout : PropTypes.func.isRequired\r\n    }\r\n    render() {\r\n        return (\r\n        <div>\r\n            <Fragment>\r\n                <NavLink onClick={this.props.logout}>\r\n                    Logout\r\n                </NavLink>\r\n            </Fragment>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null,{logout})(Logout)\r\n","import React, { Component,Fragment } from 'react'\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Container\r\n} from \"reactstrap\";\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types'\r\nimport LoginModal from './auth/LoginModal'\r\nimport RegisterModal from './auth/RegisterModal';\r\nimport Logout from './auth/Logout';\r\n\r\nclass AppNavbar extends Component { \r\n    state = {\r\n        isOpen : false\r\n    }\r\n    // initialize type for props\r\n    static propTypes = {\r\n        auth : PropTypes.object.isRequired\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen : !this.state.isOpen\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        const {isAuthenticated,admin} = this.props.auth\r\n\r\n        const authLinks = (\r\n            <Fragment>\r\n                <NavItem>\r\n                    <span className='navbar-text mr-3'>\r\n                        <strong>{admin?`Welcome ${admin.name}`:''}</strong>\r\n                    </span>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Logout />\r\n                </NavItem>\r\n            </Fragment>\r\n        )\r\n        \r\n        const guestLinks = (\r\n            <Fragment>\r\n                <NavItem>\r\n                    <RegisterModal />\r\n                </NavItem>\r\n                <NavItem>\r\n                    <LoginModal />\r\n                </NavItem>\r\n            </Fragment>\r\n        )\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"sm\" className = \"mb-5\">\r\n                    <Container>\r\n                        <NavbarBrand href='/'>Feedback</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle}></NavbarToggler>\r\n                        <Collapse isOpen = {this.state.isOpen} navbar>\r\n                            <Nav className='ml-auto' navbar>\r\n                                {isAuthenticated ?authLinks:guestLinks}\r\n                            </Nav>\r\n                    </Collapse> \r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    auth : state.auth\r\n})\r\nexport default connect(mapStateToProps,null)(AppNavbar)\r\n","import React, { Component } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,  \r\n    Col,\r\n    FormText\r\n} from 'reactstrap'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {addFeedback} from '../actions/feedbackAction'\r\n\r\nclass FeedbackModal extends Component {\r\n    state = {\r\n        modal : false,\r\n        name : '',\r\n        email : '',\r\n        id : '',\r\n        feedback : ''\r\n    }\r\n    static propTypes = {\r\n        isAuthenticated : PropTypes.bool\r\n    }\r\n    toggle = () => {\r\n        this.setState({\r\n            modal : !this.state.modal\r\n        })\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({[e.target.name] : e.target.value})\r\n    }\r\n\r\n    onSubmit = e=>{\r\n        e.preventDefault()\r\n\r\n        const newFeedback = {\r\n            name : this.state.name,\r\n            email : this.state.email,\r\n            id : this.state.id,\r\n            feedback : this.state.feedback\r\n        }\r\n\r\n        this.props.addFeedback(newFeedback)\r\n        // close modal\r\n        this.toggle()\r\n        document.getElementById(\"my-form\").reset()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <h1 style= {{marginBottom :\"10px\",marginLeft:\"20px\"}}>STUDENTS' FEEDBACKS TOOL IN BACH KHOA UNIVERSITY</h1>\r\n            <Form onSubmit={this.onSubmit} id=\"my-form\">\r\n                <FormGroup row>\r\n                    <Label for = \"name\" sm={2}>Full Name</Label>\r\n                    <Col sm={10}>\r\n                        <Input type='text' name='name' id='name' placeholder=\"Your full name\" onChange={this.onChange}></Input>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                    <Label for = \"email\" sm={2}>Email</Label>\r\n                    <Col sm={10}>\r\n                        <Input type='email' name='email' id='email' placeholder=\"Your email address\" onChange={this.onChange}></Input>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                    <Label for = \"StudentID\" sm={2}>Student ID</Label>\r\n                    <Col sm={2}>\r\n                        <Input type='text' name='id' id='id' placeholder=\"Your student ID\" onChange={this.onChange}></Input>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                    <Label for=\"FeedbackArea\" sm={2}>Your Feedback</Label>\r\n                    <Col sm={10}>\r\n                        <Input type=\"textarea\" name=\"feedback\" id=\"feedback\" onChange={this.onChange}/>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                    <Label for=\"File\" sm={2}>File</Label>\r\n                    <Col sm={10}>\r\n                        <Input type=\"file\" name=\"file\" id=\"file\" />\r\n                    </Col>\r\n                    <FormText color = \"muted\">\r\n                        This file only accepts image format\r\n                    </FormText>\r\n                </FormGroup>\r\n                <FormGroup check row>\r\n                <Col sm={{ size: 10, offset: 2 }}>\r\n                    <Button>Submit</Button>\r\n                </Col>\r\n                </FormGroup>\r\n            </Form>\r\n        </div>\r\n        )\r\n    }\r\n    }\r\n\r\nconst mapStateToProps = (state)=>({\r\n    feedback : state.feedback,\r\n    isAuthenticated : state.auth.isAuthenticated\r\n})\r\n    \r\nexport default connect(mapStateToProps,{addFeedback})(FeedbackModal)","import axios from 'axios'\r\nimport {GET_FEEDBACKS,ADD_FEEDBACK,DELETE_FEEDBACK,FEEDBACKS_LOADING} from './types'\r\nimport {returnErrors} from './errorAction'\r\nimport {tokenConfig} from './authAction';\r\n\r\nexport const loadFeedbacks = () => {\r\n    return {\r\n        type : FEEDBACKS_LOADING\r\n    }\r\n}\r\n\r\nexport const getFeedbacks = ()=>(dispatch,getState)=>{\r\n    dispatch(loadFeedbacks())\r\n    axios.get('/api/feedbacks',tokenConfig(getState))\r\n        .then(res=>\r\n            dispatch({\r\n                type : GET_FEEDBACKS,\r\n                payload : res.data\r\n            }))\r\n        .catch(err=>{\r\n            dispatch(returnErrors(err.response.msg,err.response.status))\r\n        })\r\n}\r\n\r\nexport const deleteFeedback = id => (dispatch,getState)=>{\r\n    axios.delete('/api/feedbacks',tokenConfig(getState))\r\n        .then(res=>dispatch({\r\n            type : DELETE_FEEDBACK,\r\n            payload : id //??\r\n        }))\r\n        .catch(err=>dispatch(returnErrors(err.response.data,err.response.status)))\r\n}\r\n\r\nexport const addFeedback = feedback =>(dispatch)=>{\r\n    axios.post('/api/feedbacks',feedback)\r\n        .then(res=>dispatch({\r\n            type : ADD_FEEDBACK,\r\n            payload : res.data\r\n        }))\r\n        .catch(err=> dispatch(returnErrors(err.response.data,err.response.status)))\r\n}\r\n\r\n// FIXME CONNECT WITH SERVER","import {GET_FEEDBACKS,ADD_FEEDBACK,DELETE_FEEDBACK,FEEDBACKS_LOADING} from '../actions/types'\r\n\r\n\r\nconst initialState = {\r\n    feedbacks : [],\r\n    loading : false\r\n}\r\n\r\nexport default function(state=initialState,action){\r\n    switch(action.type){\r\n        case GET_FEEDBACKS:\r\n            return {\r\n                ...state,\r\n                feedbacks : action.payload,\r\n                loading : false\r\n            }\r\n        case DELETE_FEEDBACK:\r\n            return {\r\n                ...state,\r\n                feedbacks : state.feedbacks.filter(feedback =>feedback._id !== action.payload)\r\n            }\r\n        case ADD_FEEDBACK :\r\n            return {\r\n                ...state,\r\n                feedbacks : [action.payload,...state.feedbacks]\r\n            }\r\n        case FEEDBACKS_LOADING : \r\n            return {\r\n                ...state,\r\n                loading :true\r\n            }\r\n        default : \r\n            return state\r\n    }\r\n}","import {ADMIN_LOADED,ADMIN_LOADING,AUTH_ERROR,LOGIN_FAIL,LOGIN_SUCCESS,LOGOUT_SUCCESS,REGISTER_SUCCESS,REGISTER_FAIL} from '../actions/types'\r\n\r\nconst initialState = {\r\n    token : localStorage.getItem('token'),\r\n    isLoading : false,\r\n    isAuthenticated : false,\r\n    admin : null\r\n}\r\n\r\nexport default function(state = initialState,action){\r\n    switch(action.type){\r\n        case ADMIN_LOADING :\r\n            return {\r\n                ...state, // Get current state\r\n                isLoading : true\r\n            }\r\n        case ADMIN_LOADED : \r\n            return {\r\n                ...state,\r\n                isAuthenticated:true,\r\n                isLoading :false,\r\n                admin : action.payload\r\n            }\r\n        case LOGIN_SUCCESS:\r\n        case LOGIN_SUCCESS:\r\n            localStorage.setItem('token',action.payload)\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuthenticated : true,\r\n                isLoading : false\r\n            }\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case REGISTER_FAIL:\r\n        case LOGOUT_SUCCESS:\r\n            localStorage.removeItem('token')\r\n            return {\r\n                ...state,\r\n                isAuthenticated : false,\r\n                isLoading : false,\r\n                admin : null\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}","import {GET_ERRORS,CLEAR_ERRORS} from '../actions/types'\r\n\r\nconst initialState = {\r\n    msg : {},\r\n    status : null,\r\n    id : null\r\n}\r\n\r\nexport default function(state = initialState,action){\r\n    switch(action.type){\r\n        case GET_ERRORS : \r\n            return {\r\n                msg : action.payload.msg,\r\n                status : action.payload.status,\r\n                id:action.payload.id\r\n            }\r\n        case CLEAR_ERRORS : \r\n            return {\r\n                msg :{},\r\n                status : null,\r\n                id : null\r\n            }\r\n        default: \r\n            return state\r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport feedbackReducer from './feedbackReducer'\r\nimport authReducer from './authReducer'\r\nimport errorReducer from './errorReducer'\r\n\r\nexport default combineReducers({\r\n    feedback : feedbackReducer,\r\n    auth : authReducer,\r\n    error : errorReducer\r\n})","import {createStore,applyMiddleware,compose} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(...middleware),window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()))\r\nexport default store","import React, { Component } from 'react'\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <body style= {{backgroundColor:\"#0000ff\"}}>\r\n                <tr >\r\n                    <th><img src=\"http://www.jscens.hcmut.edu.vn/img/BK.png\" width=\"150\" height=\"150\"></img></th>\r\n                    <th><p style= {{fontSize :\"150%\",marginLeft :\"20px\",color:\"#ffffff\"}}>Bach Khoa University</p>\r\n                        <p style= {{fontSize :\"150%\", marginLeft:\"20px\",color:\"#ffffff\"}}>EEC department</p>\r\n                    </th>\r\n                </tr>\r\n                </body>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport AppNavbar from './components/Navbar'\nimport FeedbackModal from './components/FeedbackModal'\nimport {Provider} from 'react-redux'\nimport store from './store'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Header from './components/Header'\n\nfunction App() {\n  return (\n      <Provider store ={store}>\n        <div className='App'>\n          <Header />\n          <AppNavbar />\n          <FeedbackModal />\n        </div>\n      </Provider>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}